init repo - Jan 11 2023

(started taking work notes few days after starting to work on the project; this section is written off of un-fresh memory)

defined problems using first principles thinking

encountered a new concept in a podcast
    the concept
        First principles thinking
    description by GPT-3
        First principles thinking is an approach to problem solving that relies on breaking down problems into the most basic components. It involves breaking down complex problems into simple, fundamental truths that cannot be deduced any further, and then using logic to build up from there to find a solution.
    place encountered
        Indie Hackers Podcast: https://share.transistor.fm/s/36dfec5e?t=32m18s
    comments
        I was already using the problem solving technique without knowing that there was a name for it. 

defined features of client application

defined resources
    things defined
        data model
            entities
            entity relationships
            resource representations
        URIs
        available HTTP methods to execute on resources
        permission configuration of defined HTTP methods
        
designed architecture
    defined architectural components

created db user, configured password and privileges
    1. Create a new user with the desired privileges:
        CREATE USER username WITH PASSWORD 'password';
    2. Grant privileges to the new user: 
        GRANT ALL PRIVILEGES ON DATABASE database_name TO username;
    3. Create the schema: 
        CREATE SCHEMA schema_name;
    4. Grant the user access to the schema: 
        GRANT ALL ON SCHEMA schema_name TO username;
    5. Grant the user access to objects in the schema: 
        GRANT ALL ON ALL TABLES IN SCHEMA schema_name TO username;
    6. Grant the user access to sequences in the schema: 
        GRANT ALL ON ALL SEQUENCES IN SCHEMA schema_name TO username;
    7. Grant the user access to functions in the schema: 
        GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA schema_name TO username;
    8. Grant the user access to types in the schema: 
        GRANT USAGE ON ALL TYPES IN SCHEMA schema_name TO username;

configured postgresql search path
    https://www.postgresql.org/docs/current/ddl-schemas.html

created db migration script
    migration script
        functions
            create
                db
                schema
                tables
                    users
                    orders
                    items
                    ordered_items
                etc.

created db schemas for Mockaroo

generated relational test data (CSV) 
    how
        using Mockaroo's web app,
            create schemas
            generate data set for referenced tables
            in the FK field of referencing tables, specify "dataset column" and reference tables
            generate data sets for tables containing FKs
            download CSVs to project directory

imported test data (CSV) into all postgresql tables
    how 
        create
            file.sql
                COPY FROM
        use
            psql
                \i <file.sql>

configured postgresql
    logging
        enabled logging collector
        set log directory

issues
    âœ“all tables are (seemingly) dropped at the end of psql session
        how to reproduce
            connect to postgres via psql as superuser
            \i migration-file
                file contents
                    create database
                    create schema
                    set search_path
                    ...
                    create table unqualified_table_name
                    ...
            connect to different database
            connect to database created by executing \i
            \d
                expected behavior
                    list of tables are returned by psql
                unexpected behavior
                    psql returns "did not find any relations"
        gotcha
            be default, search_path is reset when a connection is closed.
                how to persist contents of search_path
                    SET search_path at the database level (or user level)
                        example
                            ALTER DATABASE thestore SET search_path TO store;
            more info
                https://stackoverflow.com/questions/2875610/permanently-set-postgresql-schema-path
        hypotheses
            use of custom schemas
        attempts to resolve
            trying to set log_destination = stderr,syslog,eventlog in postgresql.conf to increase transparency of posgresql server
                brew services start postgresql@14 throws error
                    probably caused by invalid postgresql.conf
                        don't know where to look for detailed info about the error (brew list shows status code 256)
                            brew seems to not log activities of brew services by default
                                could try configuring brew or launchctl (invoked by brew services) to log relevant activity
        notes
            tables created by SQL execution via psql prompt persists, but not the tables created by \i sql
            postgresql log is showing weird logs when disconnecting/connecting to dbs
            no relevant logs found in /var/log/system.log
            https://sharegpt.com/c/CtM0d6i
        verified
            tables are not dropped
                checked logs; DROP command is not executed;
            not cause
                not the cause of issue
                    use of \i
                    db user not having privilege
                    use of IF NOT EXIST on CREATE TABLEs
            cause
                use of custom schema
                    schema added to search_path is (seemingly) dropped
                        when
                            either
                                upon disconnection from created database
                                upon reconnection to created database
    thestore.store.orders.total is a randomly generated data
        solution
            use the data in ordered_items and orders to calculate a real total value
                formula
                    total = item.price * ordered_item.quantity
    
if you psql with -v ON_ERROR_STOP=1, psql will display errors thrown by postgresql on stdout

generated seed data
    test data generation tool used
        mockaroo.com
            issues
                error: no implicit conversion of String into Integer
                    https://forum.mockaroo.com/t/convert-a-datatype-error/926
                can't just give the tool a formula to calculate a column value and expect it to generate test data
                    formula that I needed to work
                        store.order.total = store.item.price * store.ordered_item.quantity
                    expected usage of tool
                        get `price` of random row in store.items from store.orders schema
                        get `quantity` of random row in store.ordered_items from store.orders schema
                        multiply `price` & `quantity` and use the result for store.orders.total
                        from_dataset("store.item", "price"/*, random row */) * from_dataset("store.ordered_item", "quantity"/*, random row */)
                    cause
                        store.order & store.ordered_item has identifying relationships
                        limitation of tool
                            from_dataset() requires 3 arguments and thus cannot choose a "random row"
                                mockaroo.com/help/formulas
                    work around
                        create Mockaroo schemas that doesn't belong to any "real" schema
                        generate data set
                        from schema that has identifying relationships with other schema, get the data generated in previous step
                            example
                                create tmp schemas
                                    schemas
                                        tmp.order.ids
                                            column
                                                id
                                                    random GUID
                                        tmp.item.prices
                                            column
                                                price
                                                    type
                                                        dataset column
                                                    reference
                                                        store.items.price
                                        tmp.ordered_item.quantities
                                            column
                                                quantity
                                                    type
                                                        random integer
                                        tmp.order.totals
                                            columns
                                                item_price
                                                    type
                                                        dataset column
                                                    reference
                                                        tmp.item.prices.price
                                                ordered_item_quantity
                                                    type
                                                        dataset column
                                                    reference
                                                        tmp.ordered_item.quantities.quantity
                                                order_total
                                                    formula
                                                        item_price.to_i * ordered_item_quantity.to_i
                                                    gotcha
                                                        convert string to integer using Ruby method in formula
                                                            fieldname.to_i
                
seeded tables
    tables
        users
        items
        orders
        ordered_items
    by running SQL script
        SQL
            COPY _tablename_ FROM _path to file__ ...

